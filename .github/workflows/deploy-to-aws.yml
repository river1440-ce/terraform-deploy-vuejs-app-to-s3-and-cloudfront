name: Deploy to S3 and Cloudfront

on:
  push:
    branches:
      - main
    paths:
      - terraform/**
      - webapp/**
  pull_request:

jobs:
  terraform:
    name:  Terraform
    runs-on: ubuntu-latest
    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
        working-directory: ./terraform

    steps:
    # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          # terraform_version: 0.13.0:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
          terraform_wrapper: false

      - name: Setup Terraform variables
        working-directory: ./terraform
        id: vars
        run: |-
          cat > pipeline.tfvars <<EOF
          region = "${{ secrets.AWS_REGION }}"
          EOF

      # Format all Terraform configuration files adhere to a canonical format
      - name: Terraform Format
        run: terraform fmt

      # Checks that all Terraform configuration files adhere to a canonical format
      - name: Terraform Format Check
        run: terraform fmt -check

      - name: Terraform Init
        id: init
        run: terraform init
      
      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        run: terraform plan -no-color -input=false
        continue-on-error: true

      - uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style 🖌\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ⚙️\`${{ steps.init.outcome }}\`
            #### Terraform Validation 🤖\`${{ steps.validate.outcome }}\`
            #### Terraform Plan 📖\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      # On push to "main", build or change infrastructure according to Terraform configuration files
      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false

      - name: Get Cloudfront distribution and bucket name
        id: terraform_outputs
        run: |
          export CLOUDFRONT_DISTRIBUTION="$(terraform output cloudfront_distribution | tr -d '"')"
          export BUCKET_NAME="$(terraform output bucket_name | tr -d '"')"

          echo "::set-output name=CLOUDFRONT_DISTRIBUTION::${CLOUDFRONT_DISTRIBUTION}"
          echo "::set-output name=BUCKET_NAME::${BUCKET_NAME}"

    outputs:
      cloudfront_distribution: ${{ steps.terraform_outputs.outputs.CLOUDFRONT_DISTRIBUTION }}
      bucket_name: ${{ steps.terraform_outputs.outputs.BUCKET_NAME }}

  
  webapp:
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: terraform
    name:  Deploy webapp
    runs-on: ubuntu-latest

    steps:
    # Checkout the repository to the GitHub Actions runner
    - uses: actions/checkout@v3
    - name: Setup node.js environment
      uses: actions/setup-node@v3
    
    - name: Install dependencies and build
      working-directory: ./webapp
      run: |
        npm install
        npm run build

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Deploy static site to S3 bucket
      working-directory: ./webapp
      run: aws s3 sync ./dist/ s3://${{ needs.terraform.outputs.bucket_name }} --delete
    
    - name: Invalidate CloudFront
      uses: chetan/invalidate-cloudfront-action@v2
      env:
        DISTRIBUTION: ${{ needs.terraform.outputs.cloudfront_distribution }}
        PATHS: "/*"
        AWS_REGION: ${{ secrets.AWS_REGION }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}



